{"version":3,"sources":["index.js"],"names":["games","x","o","lines","Square","props","className","id","value","onClick","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","a","b","c","lookForBlock","lookForWin","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f0c0542.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nvar games = 0;\nvar x = \"X\";\nvar o = \"O\";\nconst lines = [\n   [0, 1, 2],\n   [3, 4, 5],\n   [6, 7, 8],\n   [0, 3, 6],\n   [1, 4, 7],\n   [2, 5, 8],\n   [0, 4, 8],\n   [2, 4, 6]\n];\n\nfunction Square(props) {\n   return (\n      <button className=\"square\" id={props.value} onClick={props.onClick}>\n         {props.value}\n      </button>\n   );\n}\n\nclass Board extends React.Component {\n   renderSquare(i) {\n      return (\n         <Square\n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n         />\n      );\n   }\n\n   render() {\n      return (\n         <div>\n            <div className=\"board-row\">\n               {this.renderSquare(0)}\n               {this.renderSquare(1)}\n               {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n               {this.renderSquare(3)}\n               {this.renderSquare(4)}\n               {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n               {this.renderSquare(6)}\n               {this.renderSquare(7)}\n               {this.renderSquare(8)}\n            </div>\n         </div>\n      );\n   }\n}\n\nclass Game extends React.Component {\n   constructor(props) {\n      super(props);\n      this.state = {\n         history: [\n            {\n               squares: Array(9).fill(null)\n            }\n         ],\n         stepNumber: 0,\n         xIsNext: true\n      };\n   }\n\n   handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      if (calculateWinner(squares) || squares[i]) {\n         return;\n      }\n      squares[i] = x;\n      //adjust the set state\n      this.setState({\n         history: history.concat([\n            {\n               squares: squares\n            }\n         ]),\n         stepNumber: history.length,\n      });\n      //run the ai after this \n      if(history.length === 1) {\n         //alert(squares);\n         if(squares[4] !== x) {\n            squares[4] = o;\n         } else {\n            squares[0] = o;\n         } \n      } else {\n         squares[lookForWin(squares)] = o;\n      }\n      //adjust the set state\n      this.setState({\n         history: history.concat([\n            {\n               squares: squares\n            }\n         ]),\n         stepNumber: history.length,\n      });\n   }\n\n   jumpTo(step) {\n      this.setState({\n         stepNumber: step,\n      });\n   }\n\n   render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n\n      const moves = history.map((step, move) => {\n         const desc = move ?\n            'Go to move #' + move :\n            'Restart Game';\n         return (\n            <li key={move}>\n               <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n         );\n      });\n\n      let status;\n      if (winner) {\n         status = \"Winner: \" + winner;\n         if (winner === \"Draw\");//ask to restart\n         if (++games > 5) status = \"The only way to win is to stop playing\";\n      } else {\n         status = \"Next player: \" + (this.state.xIsNext ? \"Player\" : \"Computer\");\n      }\n\n      return (\n         <div className=\"game\">\n            <div className=\"game-board\">\n               <Board\n                  squares={current.squares}\n                  onClick={i => this.handleClick(i)}\n               />\n            </div>\n            <div className=\"game-info\">\n               <div>{status}</div>\n               <ol>{moves}</ol>\n            </div>\n         </div>\n      );\n   }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n   for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n         return squares[a];\n      }\n   }\n   for (let i = 0; i < 9; i++) {\n      //console.log(squares[i]);\n      if(!squares[i]) return null;\n   }\n   return \"Draw\";\n}\n\nfunction lookForBlock(squares) {\n   for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] === x) {\n         if (squares[b] === x) {\n            if (squares[c]) continue;\n            return c;\n         }\n         if (squares[c] === x) {\n            if (squares[b]) continue;\n            return b;\n         }\n      }\n      if (squares[b] === x && squares[c] === x) {\n         if (squares[a]) continue;\n         return a;\n      }\n   }\n   //console.log(\"No Block\");\n   //check corners\n   if (squares[1] === x && squares[3] === x)\n      if (!squares[0]) return 0;\n   if (squares[1] === x && squares[5] === x)\n      if (!squares[2]) return 2;\n   if (squares[7] === x && squares[5] === x)\n      if (!squares[8]) return 8;\n   if (squares[3] === x && squares[7] === x)\n      if (!squares[6]) return 6;\n   //console.log(\"No Corners\");\n   //edge test\n   if ((squares[1] === x || squares[2] === x) &&\n      (squares[7] === x || squares[8] === x)) \n      if(!squares[5]) return 5;\n   if ((squares[1] === x || squares[0] === x) &&\n      (squares[7] === x || squares[6] === x)) \n      if(!squares[3]) return 3;\n   if ((squares[3] === x || squares[0] === x) &&\n      (squares[5] === x || squares[2] === x)) \n      if(!squares[1]) return 1;\n   if ((squares[6] === x || squares[3] === x) &&\n      (squares[5] === x || squares[8] === x)) \n      if(!squares[7]) return 7;\n   //console.log(\"No Edge\");\n   if (!squares[1]) return 1;\n   if (!squares[3]) return 3;\n   if (!squares[5]) return 5;\n   if (!squares[7]) return 7;\n   return null;\n}\n\nfunction lookForWin(squares) {\n   for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] === o) {\n         if (squares[b] === o) {\n            if (squares[c]) continue;\n            return c;\n         }\n         if (squares[c] === o) {\n            if (squares[b]) continue;\n            return b;\n         }\n      }\n      if (squares[b] === o && squares[c] === o) {\n         if (squares[a]) continue;\n         return a;\n      }\n   }\n   //console.log(\"Can't Win\");\n   return lookForBlock(squares);\n}\n"],"sourceRoot":""}